// (Date.parse_v1 "2019-07-28T22:42:36Z") Date.< (Date.parse_v1 "2019-07-28T22:42:36Z") = false
// (Date.parse_v1 "2019-07-28T22:42:36Z") Date.< (Date.parse_v1 "2020-11-26T04:37:46Z") = true
// (Date.parse_v1 "2019-07-28T22:42:36Z") Date.<= (Date.parse_v1 "2019-07-28T22:42:36Z") = true
// (Date.parse_v1 "2019-07-28T22:42:36Z") Date.<= (Date.parse_v1 "2020-11-26T04:37:46Z") = true
// (Date.parse_v1 "2019-07-28T22:42:36Z") Date.> (Date.parse_v1 "2019-07-28T22:42:36Z") = false
// (Date.parse_v1 "2020-11-26T04:37:46Z") Date.> (Date.parse_v1 "2019-07-28T22:42:36Z") = true
// (Date.parse_v1 "2020-11-26T04:37:46Z") Date.>= (Date.parse_v1 "2019-07-28T22:42:36Z") = true
// (Date.parse_v1 "2020-11-26T04:37:46Z") Date.>= (Date.parse_v1 "2020-11-26T04:37:46Z") = true
// 1095379198 |> Date.fromSeconds_v0 |> Date.toSeconds_v0 = 1095379198
// Date.day_v0 (Date.parse_v1 "2019-07-28T22:42:36Z") = 28
// Date.hour_v0 (Date.parse_v1 "2019-07-28T22:42:36Z") = 22
// Date.minute_v0 (Date.parse_v1 "2019-07-28T22:42:36Z") = 42
// Date.month_v0 (Date.parse_v1 "2019-07-28T22:42:36Z") = 7
// Date.parse_v0 "2019-07-28T22:42:36Z" = <Date: 2019-07-28T22:42:36Z>
// Date.parse_v0 "asd" = Test.typeError_v0 "Invalid date format"
// Date.parse_v1 "2019-07-28T22:42:36Z" = Ok <Date: 2019-07-28T22:42:36Z>
// Date.parse_v1 "2019-07-28T22:42:36Z" |> Date.atStartOfDay_v0 |> toString_v0 = "2019-07-28T00:00:00Z"
// Date.parse_v1 "2019-07-28T22:42:36Z" |> Date.toSeconds_v0 |> Date.fromSeconds_v0 |> toString_v0 = "2019-07-28T22:42:36Z"
// Date.parse_v1 "2019-12-27T03:27:36Z" |> Date.hour_v1  = 3 // Leif's test case
// Date.parse_v1 "asd" = Error "Invalid date format"
// Date.second_v0 (Date.parse_v1 "2019-07-28T22:42:36Z") = 36
// Date.toString_v0 (Date.parse_v1 "2019-07-28T22:42:36Z") = "2019-07-28T22:42:36Z"
// Date.today_v0 |> toString_v0 = "2020-10-17T00:00:00Z" // todo, how can we test this
// Date.weekday_v0 (Date.parse_v1 "2019-07-28T22:42:36Z") = 7
// Date.year_v0 (Date.parse_v1 "2019-07-28T22:42:36Z") = 2019