//List.contains_v0 [1;2;3] 2 = true
//List.contains_v0 [1;2;3] 4 = false
//List.contains_v0 [] 1 = false
//List.dropWhile_v0 [1;2;3;4] (\item -> item < 3) = [ \n  3, 4\n]
//List.dropWhile_v0 [1;2;3;4] (\item -> item >= 1) = []
//List.dropWhile_v0 [1;5;2;2] (\item -> item < 3) = [ \n  5, 2, 2\n]
//List.dropWhile_v0 [] (\item -> item < 3) = []
//List.filterMap_v0 [1;2;3] (\item -> if item == 2\n                                     then\n                                       Nothing\n                                     else\n                                       (Just (item * 2))) = [ \n  2, 6\n]
//List.filterMap_v0 [] (\item -> 0) = []
//List.filter_v2 [1;2;3] (\item -> match item\n                                    1 -> true\n                                    2 -> false\n                                    3 -> true\n                        ) = [ \n  1, 3\n]
//List.filter_v2 [] (\item -> true) = []
//List.flatten_v0 [[1];[2];[3]] = [ \n  1, 2, 3\n]
//List.flatten_v0 [[1];[[2;3]]] = [ \n  1, [ \n    2, 3\n  ]\n]
//List.flatten_v0 [[[]]] = [ \n  []\n]
//List.flatten_v0 [[]] = []
//List.flatten_v0 [] = []
//List.getAt_v0 [1;2;3;4] 0 = Just 1
//List.getAt_v0 [1;2;3;4] 4 = Nothing
//List.indexedMap_v0 [3;2;1] (\i, v -> v - i) = [ \n  3, 1, -1\n]
//List.indexedMap_v0 [] (\i, v -> v - i) = []
//List.interleave_v0 [1;2;3] [4;5;6] = [ \n  1, 4, 2, 5, 3, 6\n]
//List.interleave_v0 [1;2;3] [4] = [ \n  1, 4, 2, 3\n]
//List.interleave_v0 [1;2;3] [] = [ \n  1, 2, 3\n]
//List.interleave_v0 [1] [4;5;6] = [ \n  1, 4, 5, 6\n]
//List.interleave_v0 [] [4;5;6] = [ \n  4, 5, 6\n]
//List.interleave_v0 [] [] = []
//List.interpose_v0 [1;2;3] 5 = [ \n  1, 5, 2, 5, 3\n]
//List.interpose_v0 [1] 5 = [ \n  1\n]
//List.interpose_v0 [] 5 = []
//List.isEmpty_v0 [1] = false
//List.isEmpty_v0 [] = true
//List.map2_v0 [10;20;30] [1;2;3] (\a, b -> a - b) = Just [ \n    9, 18, 27\n  ]
//List.map2_v0 [10;20] [1;2;3] (\a, b -> a - b) = Nothing
//List.map2shortest_v0 [10;20;30] [1;2;3] (\a, b -> a - b) = [ \n  9, 18, 27\n]
//List.map2shortest_v0 [10;20] [1;2;3] (\a, b -> a - b) = [ \n  9, 18\n]
//List.map_v0 (List.range_v0 -5 5) (\v -> Int.mod_v0 v 4) = [ \n  3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1\n]
//List.map_v0 (List.range_v0 -5 5) (\v -> Int.remainder_v0 v -4) = [ \n  Ok -1, Ok 0, Ok -3, Ok -2, Ok -1, Ok 0, Ok 1, Ok 2, Ok 3, Ok 0, Ok 1\n]
//List.map_v0 (List.range_v0 -5 5) (\v -> Int.remainder_v0 v 4) = [ \n  Ok -1, Ok 0, Ok -3, Ok -2, Ok -1, Ok 0, Ok 1, Ok 2, Ok 3, Ok 0, Ok 1\n]
//List.map_v0 (List.range_v0 -5 5) (\v -> v % 4) = [ \n  3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1\n]
//List.member_v0 [] 1 = false
//List.randomElement_v0 [1] = Just 1
//List.randomElement_v0 [] = Nothing
//List.singleton_v0 1 = [ \n  1\n]
//List.sortByComparator_v0 [3;1;2] (\a, b -> 0.1) = Error "`f` must return one of -1, 0, 1, but returned non-int: 0.1" // List.sortByComparator works
//List.sortByComparator_v0 [3;1;2] (\a, b -> 3) = Error "`f` must return one of -1, 0, 1, but returned another int: 3" // List.sortByComparator works
//List.sortByComparator_v0 [3;1;2] (\a, b -> if Int.lessThan_v0 a b\n                                            then\n                                              -1\n                                            else\n                                              1) = Ok [ \n    1, 2, 3\n  ] // List.sortByComparator works
//List.tail_v0 [1;2;3] = Just [ \n    2, 3\n  ]
//List.tail_v0 [] = Nothing
//List.takeWhile_v0 [1;2;3;4] (\item -> item < 1) = []
//List.takeWhile_v0 [1;2;3;4] (\item -> item < 3) = [ \n  1, 2\n]
//List.takeWhile_v0 [1;5;2;2] (\item -> item < 3) = [ \n  1\n]
//List.takeWhile_v0 [] (\item -> item < 3) = []
//List.uniqueBy_v0 [1;2;3;4] (\x -> Int.divide_v0 x 2) = [ \n  1, 3, 4\n]
//List.uniqueBy_v0 [1;2;3;4] (\x -> x) = [ \n  1, 2, 3, 4\n]
//List.unzip_v0 [[1;10];[2;20];[3;30]] = [ \n  [ \n    1, 2, 3\n  ], [ \n    10, 20, 30\n  ]\n]
//List.zipShortest_v0 [10;20;30] [1;2;3] = [ \n  [ \n    10, 1\n  ], [ \n    20, 2\n  ], [ \n    30, 3\n  ]\n]
//List.zipShortest_v0 [10;20] [1;2;3] = [ \n  [ \n    10, 1\n  ], [ \n    20, 2\n  ]\n]
//List.zip_v0 [10;20;30] [1;2;3] = Just [ \n    [ \n      10, 1\n    ], [ \n      20, 2\n    ], [ \n      30, 3\n    ]\n  ]
//List.zip_v0 [10;20] [1;2;3] = Nothing
List.range_v0 -1 0 = [-1; 0]
List.range_v0 5 0 = []
List.range_v0 -5 5 = [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4; 5;]
List.map_v0 [1, 2] (fun x -> x + 1) = [2, 3]
List.map_v0 (List.range_v0 1 5) (fun x -> x + 1) = [2; 3; 4; 5; 6]
List.map_v0 [1, 2, 3] (fun x -> Bool.and_v0 (Int.greaterThanOrEqualTo_v0 x 0) (Int.lessThanOrEqualTo_v0 x 4))  = [true; true; true]
List.filter_v0 [1;2;3] (fun item -> match item with | 1 -> true | 2 -> false | 3 -> true) = [ 1, 3]
List.filter_v0 [1;2;3] (fun item -> 2) = Test.typeError_v0 "LambdaResultHasWrongType (DInt 1, TBool)"
List.filter_v0 [1;2;3] (fun item -> (match item with | item -> if item > 2 then true else false)) = [3]
List.filter_v0 [1;-1;-2;-3;2;3;4] (fun item -> (match item with | item -> if item > 2 then true else false)) = [3, 4]
List.filter_v0 [1;-1;-2;-3;2;3;4] (fun item -> (match item with | item -> if item > -2 then true else false)) = [1; -1; 2; 3; 4]
List.filter_v0 [-20; 5; 9;] (fun x -> x > 1) = [5, 9]
List.filter_v0 [-20; 5; 9;] (fun x -> x < 1) = [-20]
List.all_v0 [0; 1; 2; 3;] (fun elem -> elem > 0) = false
List.all_v0 [1; 2; 3;] (fun elem -> elem > 0) = true
List.all_v0 [0; -1; -2] (fun elem -> elem < 0) = false
List.empty_v0 = []
List.tail_v0 [10, 20, 30, 40] = [20, 30, 40]
List.tail_v0 [] = Nothing
List.head_v2 [1, 2, 3] = 1
List.head_v2 [] = Nothing

