"a" ++ "̂" = "â"
"hello" ++ " world" = "hello world"
"ᄀ" ++ "ᅡᆨ" = "각"
String.append_v1 "a" "̂" = "â"
String.append_v1 "hello" " world" = "hello world"
String.append_v1 "hello" "world" = "helloworld" // String.append_v1 works for ASCII range
String.append_v1 "ᄀ" "ᅡᆨ" = "각"
String.append_v1 "żółw" "😄" = "żółw😄" // String.append_v1 works on non-ascii strings
String.join_v0 ["a"; "̂"] "" = "â"
String.join_v0 ["hello"; " world"] "" = "hello world"
String.join_v0 ["ᄀ"; "ᅡᆨ"] "" = "각"
Bytes.length_v0 (String.toBytes_v0 "😄APPLE🍏") = 13
Bytes.length_v0 (String.toBytes_v0 "Είναι προικισμένοι με λογική") = 53
Bytes.length_v0 (String.toBytes_v0 "") = 0
String.startsWith_v0 "żółw" "żó" = true
String.startsWith_v0 "żółw" "r22" = false
String.startsWith_v0 "👩🏻‍🚀🍇" "🍇" = false
String.startsWith_v0 "123456" "123" = true
String.startsWith_v0 "" "" = true
String.endsWith_v0 "a string" "in" = false
String.endsWith_v0 "a string" "ing" = true
String.endsWith_v0 "żółw" "żó" = false
String.endsWith_v0 "żółw" "łw" = true
String.endsWith_v0 "👩🏻‍🚀🍇" "🍇" = true
String.endsWith_v0 "123456" "56" = true
String.endsWith_v0 "" "" = true
String.foreach_v1 "a string" (fun x -> x) = "a string"
String.fromChar_v1 'a' = "a"
String.base64Encode_v0 "+" = "Kw"
String.base64Encode_v0 "Ⱥ" = "yLo"
String.base64Encode_v0 "żółw" = "xbzDs8WCdw"
String.base64Encode_v0 "/*-+(&@98521" = "LyotKygmQDk4NTIx"
String.base64Encode_v0 "" = ""
String.base64Encode_v0 "f" = "Zg"
String.base64Encode_v0 "fo" = "Zm8"
String.base64Encode_v0 "foo" = "Zm9v"
String.base64Encode_v0 "foob" = "Zm9vYg"
String.base64Encode_v0 "fooba" = "Zm9vYmE"
String.base64Encode_v0 "foobar" = "Zm9vYmFy"
String.sha384_v0 "" = "OLBgp1GsljhM2TJ-sbHjaiH9txEUvgdDTAzHv2P24donTt6_529l-9Ua0vFImLlb"
String.sha384_v0 "😄" = "Z2Y7YuyYHR9miKrg6mLtxSTaHRpGZuaenmGQl3QFY58pwhPCK2bIYxJQ728ChJwA"
String.sha384_v0 "ελπίδα" = "j4uJEeBe6g8QrzbuxoI2roUgapGQiExE8CWEQqZao61eZVN1iSZ8cV39IM1nGqsa"
String.sha384_v0 "/*-+(&@98521" = "wSGXFkLMpPufNoF2mUBAjT4YlUEb9cl0Iliy4qohwt1XFpg51PRJVTWndn5PewSr"
String.sha384_v0 "👩🏻‍🚀🍇" = "hVrNUSbFOfYXwZe6zQRUFFfGPe90qr-aROG2n-hMk8kAC-xodOyHOqecLWb9HIKJ"
String.sha256_v0 "" = "47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU="
String.sha256_v0 "😄" = "JQME7QhZCYN_m3giiRc9GbdVDVQqtRZG6UwPOEOEpQI="
String.sha256_v0 "ελπίδα" = "v9JGQTLCr2YCjR5CWDh2Il-ZjVZeQRdU5lZ7xlVKuZM="
String.sha256_v0 "/*-+(&@98521" = "nein0Hm1h0t_G0Uap2unSIMj06hYVr-xYHCWeo-VRyw="
String.sha256_v0 "👩🏻‍🚀🍇" = "ZI3NDYn6EVKAxsQlsDzfUNu35MJyGt6QIKOj_FkZB04="
String.length_v0 (String.random_v0 10) = 10
String.length_v0 (String.random_v0 5) = 5
String.length_v0 (String.random_v0 0) = 0
String.length_v0 (String.random_v0 -1) = (Test.typeError_v0 "l should be a positive integer")
(String.random_v0 5) == (String.random_v0 5) = false
(String.random_v0 2) == (String.random_v0 2) = false
String.htmlEscape_v0 "test<>&\"" = "test&lt;&gt;&amp;&quot;" // HTML escaping works reasonably
String.htmlEscape_v0 "<html><head></head><body><h1>This is f#</h1></body></html>" = "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is f#&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;" // HTML escaping works reasonably
String.htmlEscape_v0 "<html><head><!-- head definitions go here --></head><body><!-- the content goes here --></body></html>" = "&lt;html&gt;&lt;head&gt;&lt;!-- head definitions go here --&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- the content goes here --&gt;&lt;/body&gt;&lt;/html&gt;"
String.htmlEscape_v0 "" = ""
String.htmlEscape_v0 "😄" = "😄"
String.isEmpty_v0 "" = true
String.isEmpty_v0 "a" = false
String.newline_v0 = "\n"
// String.isSubstring_v1 "a string" "in" = true // substring works
// String.isSubstring_v1 "a string" "x" = false // substring works
String.length_v0 "😄" = 4
String.length_v0 "abcdef" = 6
String.length_v1 "😄" = 1
String.length_v1 "abcdef" = 6
String.prepend_v0 "hello" "world" = "worldhello" // String.prepend works for ASCII range
String.prepend_v0 "żółw" "😄" = "😄żółw" // String.prepend works on non-ascii strings
String.prepend_v0 "123" "456" = "456123"
String.prepend_v0 "óñÜá" "abc" = "abcóñÜá"
String.replaceAll_v0 "abcABCcbaCBA" "b" "x" = "axcABCcxaCBA"
String.slugify_v0 "  m@y  'super'  really- excellent *uber_ amazing* ~very  ~ \"clever\" thing: coffee😭! " = "m@y-'super'-really-excellent-*uber_-amazing*-~very-~-\"clever\"-thing:-coffee!" // Slugify works
String.slugify_v0 "" = ""
String.slugify_v1 "  m@y  'super'  really- excellent *uber_ amazing* ~very  ~ \"clever\" thing: coffee😭!" = "my-super-really-excellent-uber-amazing-very-clever-thing-coffee" // Slugify works
String.slugify_v1 "" = ""
String.slugify_v1 "ABCD-45646sassa" = "abcd-45646sassa"
String.slugify_v2 "ddsd516ds125sd12sd12Ü" = "ddsd516ds125sd12sd12"
String.slugify_v2 "  M@y  'super'  Really- exce+llent *Uber_ ama\"zing* ~very   5x5 ~ \"clever\" thing: coffee😭!" = "my-super-really-excellent-uber-amazing-very-5x5-clever-thing-coffee" // Slugify works
String.slugify_v2 "🎁🎄Ǣʚ231" = "231"
String.slugify_v2 "" = ""
String.fromList_v0 ['a', 'b'] = (Test.typeError_v0 "This function no longer exists.")
String.fromList_v1 ['a', 'b', '1'] = "ab1"
String.fromList_v1 ['@', 'Ǣ', 'á', '1'] = "@Ǣá1"
//String.fromList_v1 ['a','b','🍇','1']
String.split_v0 "hello😄world" "😄" = [ "hello", "world" ] // String split works on strings with emoji + ascii
String.split_v0 "hello&&&&world" "&&&&" = [ "hello", "world" ]
String.split_v0 "hello34564world34564sun" "😄" = [ "hello34564world34564sun" ]
String.split_v0 "hello34564world34564sun" "34564" = [ "hello", "world", "sun" ]
String.split_v0 "" "34564" = [ "" ]
String.split_v0 "34564" "" = [ "34564" ]
String.toInt_v0 "1" = 1
String.toInt_v0 "55555555" = 55555555
String.toInt_v0 "0" = 0
String.toInt_v0 "-11111" = -11111
String.toInt_v0 "+333" = 333
String.toInt_v0 "-11111" = -11111
String.toInt_v1 "1" = Ok 1
String.toInt_v1 "-00001" = Ok -1
String.toInt_v1 "-10001" = Ok -10001
String.toInt_v1 "0" = Ok 0
String.toInt_v1 "9999999999999999999999999998" = Ok 9999999999999999999999999998I
String.toInt_v1 "-9999999999999999999999999998" = Ok -9999999999999999999999999998I
String.toFloat_v0 "1.5" = 1.5
String.toFloat_v0 "0.0" = 0.0
String.toFloat_v0 "-0.5" = -0.5
String.toFloat_v0 "+0.5" = 0.5
String.toFloat_v0 ".5" = 0.5
String.toFloat_v0 "-9999999999999999999999999998.9" = -9999999999999999999999999998.9
String.toFloat_v1 "1.5" = Ok 1.5
String.toFloat_v1 "0.0" = Ok 0.0
String.toFloat_v1 "-0.5" = Ok -0.5
String.toFloat_v1 "+0.5" = Ok 0.5
String.toFloat_v1 ".5" = Ok 0.5
String.toFloat_v1 "-55555555555555555555555555555.5" = Ok -55555555555555555555555555555.5
String.toFloat_v1 "-141s" = Error "Expected a string representation of an IEEE float"
String.toList_v1 "abc" = [ 'a', 'b', 'c'] // String.toList_v1 works
String.toLowercase_v0 "ABCDEF" = "abcdef" // String.toLowercase_v0 works for ASCII range
String.toLowercase_v0 "AB323CDEF" = "ab323cdef"
String.toLowercase_v0 "sánchez" = "sánchez"
String.toLowercase_v0 "żółw" = "żółw"
String.toLowercase_v0 "😄ORANGE" = "😄orange"
String.toLowercase_v1 "ABCDEF" = "abcdef" // String.toLowercase_v0 works for ASCII range
String.toLowercase_v1 "AB323CDEF" = "ab323cdef"
String.toLowercase_v1 "sánchez" = "sánchez"
String.toLowercase_v1 "😄ORANGE" = "😄orange"
String.toUppercase_v0 "hello😄world" = "HELLO😄WORLD"
String.toUppercase_v0 "żółw" = "ŻÓŁW"
String.toUppercase_v1 "abcdef" = "ABCDEF" // String.toUppercase_v1 works for ASCII range
String.toUppercase_v1 "hello😄world" = "HELLO😄WORLD" // String.toUppercase_v1 works on mixed strings
String.toUppercase_v1 "żółw" = "ŻÓŁW" // String.toUppercase_v1 works on non-ascii strings
//String.trimEnd_v0 "      " = ""
//String.trimEnd_v0 "  foo  " = "  foo"
//String.trimEnd_v0 "  foo bar  " = "  foo bar"
//String.trimEnd_v0 "  foo" = "  foo"
//String.trimEnd_v0 " 😄foobar😄 " = " 😄foobar😄"
//String.trimEnd_v0 "  foo bar  " = "  foo bar"
//String.trimEnd_v0 "foo  " = "foo"
//String.trimEnd_v0 "foo" = "foo"
//String.trimStart_v0 "      " = ""
//String.trimStart_v0 "  foo  " = "foo  "
//String.trimStart_v0 "  foo bar  " = "foo bar  "
//String.trimStart_v0 "  foo" = "foo"
//String.trimStart_v0 " 😄foobar😄 " = "😄foobar😄 "
//String.trimStart_v0 "  foo bar  " = "foo bar  "
//String.trimStart_v0 "foo  " = "foo  "
//String.trimStart_v0 "foo" = "foo"
String.trim_v0 "      " = "" // String trim empties a whitespace only string
String.trim_v0 "  foo  " = "foo" // String trims both leading + trailing spaces
String.trim_v0 "  foo bar  " = "foo bar" // String trims both leading + trailing spaces, leaving inner untouched
String.trim_v0 "  foo" = "foo" // String trims leading spaces
String.trim_v0 " 😄foobar😄 " = "😄foobar😄" // String trims both leading + trailing spaces, preserving emoji
String.trim_v0 "  foo bar " = "foo bar" // String trims both leading + trailing spaces, leaving inner untouched w/ unicode spaces
String.trim_v0 "foo  " = "foo" // String trims trailing spaces
String.trim_v0 "foo" = "foo" // String trim noops
String.reverse_v0 "abcde" = "edcba"
String.reverse_v0 "0abcde" = "edcba0"
String.reverse_v0 "a" = "a"
String.reverse_v0 "" = ""
String.reverse_v0 "ábc" = "cbá"
String.reverse_v0 "🎁🧸Ǆʠ123" = "321ʠǄ🧸🎁"
String.reverse_v0 "😄foobar👽" = "👽raboof😄"
String.dropFirst_v0 "abcd" -3 = "abcd"
String.dropFirst_v0 "abcd" 0 = "abcd"
String.dropFirst_v0 "abcd" 3 = "d"
String.dropFirst_v0 "abcd" 3 = "d"
String.dropFirst_v0 "🍏🍒🍒" 1 = "🍒🍒"
String.dropFirst_v0 "🍏🍒🍍" 2 = "🍍"
String.dropFirst_v0 "🍏a🍒b🍍c" 2 = "🍒b🍍c"
String.dropLast_v0 "abcd" -3 = "abcd"
String.dropLast_v0 "abcd" 0 = "abcd"
String.dropLast_v0 "abcd" 3 = "a"
String.dropLast_v0 "🍏🍒🍒" 1 = "🍏🍒"
String.dropLast_v0 "🍏🍒🍍" 2 = "🍏"
String.dropLast_v0 "🍏a🍒b🍍c" 2 = "🍏a🍒b"
String.last_v0 "abcd" -3 = ""
String.last_v0 "abcd" 0 = ""
String.last_v0 "abcd" 1 = "d"
String.last_v0 "abcd" 2 = "cd"
String.last_v0 "abcd" 3 = "bcd"
String.last_v0 "🍍🍍🍏" 1 = "🍏"
String.last_v0 "🍊🍍🍏" 2 = "🍍🍏"
//String.slice_v0 "abcd" -2 4 = "cd"
String.slice_v0 "abcd" -5 -6 = ""
//String.slice_v0 "abcd" -5 1 = "a"
//String.slice_v0 "abcd" 0 -1 = "abc"
String.slice_v0 "abcd" 2 3 = "c"
String.slice_v0 "abcd" 2 6 = "cd"
String.slice_v0 "abcd" 3 2 = ""
String.slice_v0 "abcd" 5 6 = ""
String.first_v0 "abcd" -3 = ""
String.first_v0 "abcd" 0 = ""
String.first_v0 "abcd" 1 = "a"
String.first_v0 "abcd" 2 = "ab"
String.first_v0 "abcd" 3 = "abc"
String.first_v0 "🍍🍍🍏" 1 = "🍍"
String.first_v0 "🍊🍍🍏" 2 = "🍊🍍"
String.padStart_v0 "123" "0" 3 = "123"
String.padStart_v0 "123" "0" 6 = "000123"
String.padStart_v0 "123🍊🍊" "0" 3 = "123🍊🍊"
String.padEnd_v0 "123" "0" 3 = "123"
String.padEnd_v0 "123" "0" 6 = "123000"
String.padEnd_v0 "123🍊🍊" "0" 8 = "12300000"
[test.stringForeach]
// Check that foreach executes the right number of times
(let _ = String.foreach_v1 "a string" (fun x -> Test.incrementSideEffectCounter_v0 false) in
 Test.sideEffectCount_v0) = 8
