"a" ++ "̂" = "â"
"hello" ++ " world" = "hello world"
"ᄀ" ++ "ᅡᆨ" = "각"
String.append_v1 "a" "̂" = "â"
String.append_v1 "hello" " world" = "hello world"
String.append_v1 "hello" "world" = "helloworld" // String.append_v1 works for ASCII range
String.append_v1 "ᄀ" "ᅡᆨ" = "각"
String.append_v1 "żółw" "😄" = "żółw😄" // String.append_v1 works on non-ascii strings
String.join_v0 ["a"; "̂"] "" = "â"
String.join_v0 ["hello"; " world"] "" = "hello world"
String.join_v0 ["ᄀ"; "ᅡᆨ"] "" = "각"
// String.dropFirst_v0 "abcd" -3 = "abcd"
// String.dropFirst_v0 "abcd" 0 = "abcd"
// String.dropFirst_v0 "abcd" 3 = "d"
// String.dropLast_v0 "abcd" -3 = "abcd"
// String.dropLast_v0 "abcd" 0 = "abcd"
// String.dropLast_v0 "abcd" 3 = "a"
String.endsWith_v0 "a string" "in" = false
String.endsWith_v0 "a string" "ing" = true
String.foreach_v1 "a string" (fun x -> x) = "a string"
String.fromChar_v1 'a' = "a"
// String.first_v0 "abcd" -3 = ""
// String.first_v0 "abcd" 0 = ""
// String.first_v0 "abcd" 3 = "abc"
// String.htmlEscape_v0 "test<>&\"" = "test&lt;&gt;&amp;&quot;" // HTML escaping works reasonably
String.isEmpty_v0 "" = true
String.isEmpty_v0 "a" = false
String.newline_v0 = "\n"
// String.isSubstring_v1 "a string" "in" = true // substring works
// String.isSubstring_v1 "a string" "x" = false // substring works
// String.last_v0 "abcd" -3 = ""
// String.last_v0 "abcd" 0 = ""
// String.last_v0 "abcd" 3 = "bcd"
String.length_v0 "😄" = 4
String.length_v0 "abcdef" = 6
String.length_v1 "😄" = 1
String.length_v1 "abcdef" = 6
// String.padEnd_v0 "123" "0" 3 = "123"
// String.padEnd_v0 "123" "0" 6 = "123000"
// String.padStart_v0 "123" "0" 3 = "123"
// String.padStart_v0 "123" "0" 6 = "000123"
String.prepend_v0 "hello" "world" = "worldhello" // String.prepend works for ASCII range
String.prepend_v0 "żółw" "😄" = "😄żółw" // String.prepend works on non-ascii strings
String.prepend_v0 "123" "456" = "456123"
String.prepend_v0 "óñÜá" "abc" = "abcóñÜá"
String.replaceAll_v0 "abcABCcbaCBA" "b" "x" = "axcABCcxaCBA"
// String.slice_v0 "abcd" -2 4 = "cd"
// String.slice_v0 "abcd" -5 -6 = ""
// String.slice_v0 "abcd" -5 1 = "a"
// String.slice_v0 "abcd" 0 -1 = "abc"
// String.slice_v0 "abcd" 2 3 = "c"
// String.slice_v0 "abcd" 2 6 = "cd"
// String.slice_v0 "abcd" 3 2 = ""
// String.slice_v0 "abcd" 5 6 = ""
String.slugify_v0 "  m@y  'super'  really- excellent *uber_ amazing* ~very  ~ \"clever\" thing: coffee😭! " = "my-super-really-excellent-uber-amazing-very-clever-thing-coffee" // Slugify works
// String.slugify_v1 "  m@y  'super'  really- excellent *uber_ amazing* ~very  ~ \"clever\" thing: coffee😭!" = "my-super-really-excellent-uber-amazing-very-clever-thing-coffee" // Slugify works
// String.slugify_v2 "  M@y  'super'  Really- exce+llent *Uber_ ama\"zing* ~very   5x5 ~ \"clever\" thing: coffee😭!" = "my-super-really-excellent-uber-amazing-very-5x5-clever-thing-coffee" // Slugify works
String.split_v0 "hello😄world" "😄" = [ "hello", "world" ] // String split works on strings with emoji + ascii
String.split_v0 "hello&&&&world" "&&&&" = [ "hello", "world" ]
String.split_v0 "hello34564world34564sun" "😄" = [ "hello34564world34564sun" ]
String.split_v0 "hello34564world34564sun" "34564" = [ "hello", "world", "sun" ]
String.split_v0 "" "34564" = [ "" ]
String.split_v0 "34564" "" = [ "34564" ]
// String.startsWith_v0 "a string" " s" = false // startsWith works
// String.startsWith_v0 "a string" "a s" = true // startsWith works
String.toInt_v0 "1" = 1
String.toInt_v0 "55555555" = 55555555
String.toInt_v0 "0" = 0
String.toInt_v0 "-11111" = -11111
String.toInt_v0 "+333" = 333
String.toInt_v0 "-11111" = -11111
String.toInt_v1 "1" = Ok 1
String.toFloat_v0 "1.5" = 1.5
String.toFloat_v0 "0.0" = 0.0
String.toFloat_v0 "-0.5" = -0.5
String.toFloat_v0 "+0.5" = 0.5
String.toFloat_v0 ".5" = 0.5
String.toFloat_v0 "1.5" = 1.5
String.toFloat_v0 "0.0" = 0.0
String.toFloat_v0 "-0.5" = -0.5
String.toFloat_v0 "+0.5" = 0.5
String.toFloat_v0 ".5" = 0.5
String.toList_v1 "abc" = [ 'a', 'b', 'c'] // String.toList_v1 works
String.toLowercase_v0 "ABCDEF" = "abcdef" // String.toLowercase_v0 works for ASCII range
String.toLowercase_v0 "AB323CDEF" = "ab323cdef"
String.toLowercase_v0 "sánchez" = "sánchez"
String.toLowercase_v0 "😄ORANGE" = "😄orange"
String.toLowercase_v1 "ABCDEF" = "abcdef" // String.toLowercase_v0 works for ASCII range
String.toLowercase_v1 "AB323CDEF" = "ab323cdef"
String.toLowercase_v1 "sánchez" = "sánchez"
String.toLowercase_v1 "😄ORANGE" = "😄orange"
String.toUppercase_v0 "hello😄world" = "HELLO😄WORLD"
String.toUppercase_v0 "żółw" = "ŻÓŁW"
String.toUppercase_v1 "abcdef" = "ABCDEF" // String.toUppercase_v1 works for ASCII range
String.toUppercase_v1 "hello😄world" = "HELLO😄WORLD" // String.toUppercase_v1 works on mixed strings
String.toUppercase_v1 "żółw" = "ŻÓŁW" // String.toUppercase_v1 works on non-ascii strings
// String.trimEnd_v0 "      " = ""
// String.trimEnd_v0 "  foo  " = "  foo"
// String.trimEnd_v0 "  foo bar  " = "  foo bar"
// String.trimEnd_v0 "  foo" = "  foo"
// String.trimEnd_v0 " 😄foobar😄 " = " 😄foobar😄"
// String.trimEnd_v0 "  foo bar  " = "  foo bar"
// String.trimEnd_v0 "foo  " = "foo"
// String.trimEnd_v0 "foo" = "foo"
// String.trimStart_v0 "      " = ""
// String.trimStart_v0 "  foo  " = "foo  "
// String.trimStart_v0 "  foo bar  " = "foo bar  "
// String.trimStart_v0 "  foo" = "foo"
// String.trimStart_v0 " 😄foobar😄 " = "😄foobar😄 "
// String.trimStart_v0 "  foo bar  " = "foo bar  "
// String.trimStart_v0 "foo  " = "foo  "
// String.trimStart_v0 "foo" = "foo"
String.trim_v0 "      " = "" // String trim empties a whitespace only string
String.trim_v0 "  foo  " = "foo" // String trims both leading + trailing spaces
String.trim_v0 "  foo bar  " = "foo bar" // String trims both leading + trailing spaces, leaving inner untouched
String.trim_v0 "  foo" = "foo" // String trims leading spaces
String.trim_v0 " 😄foobar😄 " = "😄foobar😄" // String trims both leading + trailing spaces, preserving emoji
String.trim_v0 "  foo bar " = "foo bar" // String trims both leading + trailing spaces, leaving inner untouched w/ unicode spaces
String.trim_v0 "foo  " = "foo" // String trims trailing spaces
String.trim_v0 "foo" = "foo" // String trim noops
String.reverse_v0 "abcde" = "edcba"
String.reverse_v0 "0abcde" = "edcba0"
String.reverse_v0 "a" = "a"
String.reverse_v0 "" = ""
[test.stringForeach]
// Check that foreach executes the right number of times
(let _ = String.foreach_v1 "a string" (fun x -> Test.incrementSideEffectCounter_v0 false) in
 Test.sideEffectCount_v0) = 8
