String.length_v1 "�" = 1 // String.length_v2 returns the correct length for a string containing an emoji
String.toUppercase_v1 "abcdef" = "ABCDEF" // String.toUppercase_v1 works for ASCII range
String.toLowercase_v1 "ABCDEF" = "abcdef" // String.toLowercase_v1 works for ASCII range
String.toUppercase_v1 "hello😄world" = "HELLO😄WORLD" // String.toUppercase_v1 works on mixed strings
String.toUppercase_v1 "żółw" = "ŻÓŁW" // String.toUppercase_v1 works on non-ascii strings
String.split_v0 "hello😄world" "😄" = [ \n  "hello", "world"\n] // String split works on strings with emoji + ascii
String.trim_v0 "foo" = "foo" // String trim noops
String.trim_v0 "      " = "" // String trim empties a whitespace only string
String.trim_v0 "  foo" = "foo" // String trims leading spaces
String.trim_v0 "foo  " = "foo" // String trims trailing spaces
String.trim_v0 "  foo  " = "foo" // String trims both leading + trailing spaces
String.trim_v0 "  foo bar  " = "foo bar" // String trims both leading + trailing spaces, leaving inner untouched
String.trim_v0 "  foo bar " = "foo bar" // String trims both leading + trailing spaces, leaving inner untouched w/ unicode spaces
String.trim_v0 " 😄foobar😄 " = "😄foobar😄" // String trims both leading + trailing spaces, preserving emoji
String.htmlEscape_v0 "test<>&\"" = "test&lt;&gt;&amp;&quot;" // HTML escaping works reasonably
String.slugify_v1 "  m@y  'super'  really- excellent *uber_ amazing* ~very  ~ \"clever\" thing: coffee😭!" = "my-super-really-excellent-uber-amazing-very-clever-thing-coffee" // Slugify works
String.slugify_v2 "  M@y  'super'  Really- exce+llent *Uber_ ama\"zing* ~very   5x5 ~ \"clever\" thing: coffee😭!" = "my-super-really-excellent-uber-amazing-very-5x5-clever-thing-coffee" // Slugify works
String.isSubstring_v1 "a string" "in" = true // substring works
String.isSubstring_v1 "a string" "x" = false // substring works
String.startsWith_v0 "a string" "a s" = true // startsWith works
String.startsWith_v0 "a string" " s" = false // startsWith works
String.endsWith_v0 "a string" "ing" = true // endsWith works
String.endsWith_v0 "a string" "in" = false // endsWith works
String.toInt_v0 "1" = 1 // string_toint_works
String.toInt_v1 "1" = Ok 1 // string_toint_works
String.append_v1 "hello" "world" = "helloworld" // String.append_v1 works for ASCII range
String.append_v1 "żółw" "😄" = "żółw😄" // String.append_v1 works on non-ascii strings
String.prepend_v0 "hello" "world" = "worldhello" // String.prepend works for ASCII range
String.prepend_v0 "żółw" "😄" = "😄żółw" // String.prepend works on non-ascii strings
String.toList_v1 "abc" = [ \n  'a', 'b', 'c'\n] // String.toList_v1 works
