Result.map_v0 (Ok 4) (\x -> Int.divide_v0 x 2) = Ok 2
Result.map_v0 (Error "test") (\x -> Int.divide_v0 x 2) = Error "test"
Result.map_v1 (Ok 4) (\x -> Int.divide_v0 x 2) = Ok 2
Result.map_v1 (Error "test") (\x -> Int.divide_v0 x 2) = Error "test"
Result.map_v1 blank (\x -> Int.divide_v0 x 2) = <Incomplete>
Result.map2_v0 (Ok 10) (Ok 1) (\a, b -> a - b) = Ok 9
Result.map2_v0 (Ok 10) (Error "error2") (\a, b -> a - b) = Error "error2"
Result.map2_v0 (Error "error1") (Ok 1) (\a, b -> a - b) = Error "error1"
Result.map2_v0 (Error "error1") (Error "error2") (\a, b -> a - b) = Error "error1"
Result.mapError_v0 (Ok 4) (\x -> Int.divide_v0 x 2) = Ok 4
Result.mapError_v0 (Error "test") (\x -> String.append_v0 x "-appended") = Error "test-appended"
Result.mapError_v1 (Ok 4) (\x -> Int.divide_v0 x 2) = Ok 4
Result.mapError_v1 (Error "test") (\x -> String.append_v0 x "-appended") = Error "test-appended"
Result.withDefault_v0 (Ok 6) 5 = 6
Result.withDefault_v0 (Error "test") 5 = 5
Result.fromOption_v0 (Just 6) "test" = Ok 6
Result.fromOption_v0 Nothing "test" = Error "test"
Result.fromOption_v1 (Just (Error "test")) "test" = Ok Error "test"
Result.toOption_v0 (Ok 6) = Just 6
Result.toOption_v0 (Error "test") = Nothing
Result.toOption_v1 (Error "test") = Nothing
Result.andThen_v0 (Ok 5) (\x -> Error "test") = Error "test"
Result.andThen_v0 (Ok 5) (\x -> Ok (1 + x)) = Ok 6
Result.andThen_v0 (Error "test") (\x -> Ok 5) = Error "test"
Result.andThen_v0 (Error "test") (\x -> Error "test") = Error "test"
Result.andThen_v1 (Ok 5) (\x -> Error "test") = Error "test"
Result.andThen_v1 (Ok 5) (\x -> Ok (1 + x)) = Ok 6
Result.andThen_v1 (Error "test") (\x -> Ok 5) = Error "test"
Result.andThen_v1 (Error "test") (\x -> Error "test") = Error "test"