Option::map_v0 (Just 4) (\x -> Int::divide_v0 x 2) = Just 2 // Option stdlibs work
Option::map_v0 Nothing (\x -> Int::divide_v0 x 2) = Nothing // Option stdlibs work
Option::map_v1 (Just 4) (\x -> Int::divide_v0 x 2) = Just 2 // Option stdlibs work
Option::map_v1 Nothing (\x -> Int::divide_v0 x 2) = Nothing // Option stdlibs work
Option::map2_v0 (Just 10) (Just 1) (\a, b -> a - b) = Just 9 // Option stdlibs work
Option::map2_v0 (Just 10) Nothing (\a, b -> a - b) = Nothing // Option stdlibs work
Option::map2_v0 Nothing (Just 1) (\a, b -> a - b) = Nothing // Option stdlibs work
Option::map2_v0 Nothing Nothing (\a, b -> a - b) = Nothing // Option stdlibs work
Option::withDefault_v0 (Just 6) 5 = 6 // Option stdlibs work
Option::withDefault_v0 Nothing 5 = 5 // Option stdlibs work
Option::andThen_v0 (Just 5) (\x -> Nothing) = Nothing // Option stdlibs work
Option::andThen_v0 (Just 5) (\x -> Just (1 + x)) = Just 6 // Option stdlibs work
Option::andThen_v0 Nothing (\x -> Just 5) = Nothing // Option stdlibs work
Option::andThen_v0 Nothing (\x -> Nothing) = Nothing // Option stdlibs work
Result::map_v0 (Ok 4) (\x -> Int::divide_v0 x 2) = Ok 2 // Result stdlibs work
Result::map_v0 (Error "test") (\x -> Int::divide_v0 x 2) = Error "test" // Result stdlibs work
Result::map_v1 (Ok 4) (\x -> Int::divide_v0 x 2) = Ok 2 // Result stdlibs work
Result::map_v1 (Error "test") (\x -> Int::divide_v0 x 2) = Error "test" // Result stdlibs work
Result::map_v1 blank (\x -> Int::divide_v0 x 2) = <Incomplete> // Result stdlibs work
Result::map2_v0 (Ok 10) (Ok 1) (\a, b -> a - b) = Ok 9 // Result stdlibs work
Result::map2_v0 (Ok 10) (Error "error2") (\a, b -> a - b) = Error "error2" // Result stdlibs work
Result::map2_v0 (Error "error1") (Ok 1) (\a, b -> a - b) = Error "error1" // Result stdlibs work
Result::map2_v0 (Error "error1") (Error "error2") (\a, b -> a - b) = Error "error1" // Result stdlibs work
Result::mapError_v0 (Ok 4) (\x -> Int::divide_v0 x 2) = Ok 4 // Result stdlibs work
Result::mapError_v0 (Error "test") (\x -> String::append_v0 x "-appended") = Error "test-appended" // Result stdlibs work
Result::mapError_v1 (Ok 4) (\x -> Int::divide_v0 x 2) = Ok 4 // Result stdlibs work
Result::mapError_v1 (Error "test") (\x -> String::append_v0 x "-appended") = Error "test-appended" // Result stdlibs work
Result::withDefault_v0 (Ok 6) 5 = 6 // Result stdlibs work
Result::withDefault_v0 (Error "test") 5 = 5 // Result stdlibs work
Result::fromOption_v0 (Just 6) "test" = Ok 6 // Result stdlibs work
Result::fromOption_v0 Nothing "test" = Error "test" // Result stdlibs work
Result::fromOption_v1 (Just (Error "test")) "test" = Ok Error "test" // Result stdlibs work
Result::toOption_v0 (Ok 6) = Just 6 // Result stdlibs work
Result::toOption_v0 (Error "test") = Nothing // Result stdlibs work
Result::toOption_v1 (Error "test") = Nothing // Result stdlibs work
Result::andThen_v0 (Ok 5) (\x -> Error "test") = Error "test" // Result stdlibs work
Result::andThen_v0 (Ok 5) (\x -> Ok (1 + x)) = Ok 6 // Result stdlibs work
Result::andThen_v0 (Error "test") (\x -> Ok 5) = Error "test" // Result stdlibs work
Result::andThen_v0 (Error "test") (\x -> Error "test") = Error "test" // Result stdlibs work
Result::andThen_v1 (Ok 5) (\x -> Error "test") = Error "test" // Result stdlibs work
Result::andThen_v1 (Ok 5) (\x -> Ok (1 + x)) = Ok 6 // Result stdlibs work
Result::andThen_v1 (Error "test") (\x -> Ok 5) = Error "test" // Result stdlibs work
Result::andThen_v1 (Error "test") (\x -> Error "test") = Error "test" // Result stdlibs work
Dict::singleton_v0 "one" 1 = { \n  one: 1\n} // Dict stdlibs work
Dict::member_v0\n  {\n    otherKey = 5\n  }\n  "someKey" = false // Dict stdlibs work
Dict::member_v0\n  {\n    otherKey = 5\n    someKey = 5\n  }\n  "someKey" = true // Dict stdlibs work
Dict::keys_v0 {\n                key1 = "val1"\n              } = [ \n  "key1"\n] // Dict stdlibs work
Dict::values_v0 {\n                  key1 = "val1"\n                } = [ \n  "val1"\n] // Dict stdlibs work
Dict::toList_v0 {} = [] // Dict stdlibs work
Dict::toList_v0 {\n                  a = 1\n                  b = 2\n                  c = 3\n                } = [ \n  [ \n    "a", 1\n  ], [ \n    "b", 2\n  ], [ \n    "c", 3\n  ]\n] // Dict stdlibs work
Dict::fromListOverwritingDuplicates_v0 [] = {} // Dict stdlibs work
Dict::fromListOverwritingDuplicates_v0 [["a";1];["b";2];["c";3]] = { \n  c: 3,\n  b: 2,\n  a: 1\n} // Dict stdlibs work
Dict::fromListOverwritingDuplicates_v0 [["a";1];["b";2];["a";3]] = { \n  b: 2,\n  a: 3\n} // Dict stdlibs work
Dict::fromList_v0 [] = Just {} // Dict stdlibs work
Dict::fromList_v0 [["a";1];["b";2];["c";3]] = Just { \n    c: 3,\n    b: 2,\n    a: 1\n  } // Dict stdlibs work
Dict::fromList_v0 [["a";1];["b";2];["a";3]] = Nothing // Dict stdlibs work
Dict::get_v1\n  {\n    key1 = "val1"\n  }\n  "key1" = Just "val1" // Dict stdlibs work
Dict::foreach_v0\n  {\n    key1 = "val1"\n    key2 = "val2"\n  }\n  (\x -> x ++ "_append") = { \n  key2: "val2_append",\n  key1: "val1_append"\n} // Dict stdlibs work
Dict::map_v0\n  {\n    key1 = "val1"\n    key2 = "val2"\n  }\n  (\k, x -> k ++ x) = { \n  key2: "key2val2",\n  key1: "key1val1"\n} // Dict stdlibs work
Dict::empty_v0 = {} // Dict stdlibs work
Dict::isEmpty_v0 {} = true // Dict stdlibs work
Dict::isEmpty_v0 {\n                   a = 1\n                 } = false // Dict stdlibs work
Dict::merge_v0\n  {\n    key1 = "val1"\n  }\n  {\n    key2 = "val2"\n  } = { \n  key2: "val2",\n  key1: "val1"\n} // Dict stdlibs work
Dict::toJSON_v0 {\n                  key1 = "val1"\n                  key2 = "val2"\n                } = "{ "key1": "val1", "key2": "val2" }" // Dict stdlibs work
Dict::filter_v1\n  {\n    key1 = "val1"\n    key2 = "val2"\n  }\n  (\k, v -> v == "val1") = { \n  key1: "val1"\n} // Dict stdlibs work
Dict::filter_v1\n  {\n    key1 = "val1"\n    key2 = "val2"\n  }\n  (\k, v -> k == "key1") = { \n  key1: "val1"\n} // Dict stdlibs work
Dict::filter_v1\n  {\n    key1 = 1\n    key2 = blank\n    key3 = 3\n  }\n  (\k, v -> v > 0) = { \n  key3: 3,\n  key1: 1\n} // Dict stdlibs work
Dict::filterMap_v0 {} (\key, value -> 0) = {} // Dict stdlibs work
Dict::filterMap_v0\n  {\n    a = "x"\n    b = "y"\n    c = "z"\n  }\n  (\key, value -> if value == "y"\n                  then\n                    Nothing\n                  else\n                    (Just (key ++ value))) = { \n  c: "cz",\n  a: "ax"\n} // Dict stdlibs work
Dict::size_v0 {} = 0 // Dict stdlibs work
Dict::size_v0 {\n                a = 3\n                b = 1\n                c = 1\n              } = 3 // Dict stdlibs work
List::singleton_v0 1 = [ \n  1\n] // List stdlibs work
List::tail_v0 [] = Nothing // List stdlibs work
List::tail_v0 [1;2;3] = Just [ \n    2, 3\n  ] // List stdlibs work
List::uniqueBy_v0 [1;2;3;4] (\x -> Int::divide_v0 x 2) = [ \n  1, 3, 4\n] // List stdlibs work
List::uniqueBy_v0 [1;2;3;4] (\x -> x) = [ \n  1, 2, 3, 4\n] // List stdlibs work
List::getAt_v0 [1;2;3;4] 0 = Just 1 // List stdlibs work
List::getAt_v0 [1;2;3;4] 4 = Nothing // List stdlibs work
List::isEmpty_v0 [] = true // List stdlibs work
List::isEmpty_v0 [1] = false // List stdlibs work
List::filter_v2 [] (\item -> true) = [] // List stdlibs work
List::filter_v2 [1;2;3] (\item -> match item\n                                    1 -> true\n                                    2 -> false\n                                    3 -> true\n                        ) = [ \n  1, 3\n] // List stdlibs work
List::indexedMap_v0 [] (\i, v -> v - i) = [] // List stdlibs work
List::indexedMap_v0 [3;2;1] (\i, v -> v - i) = [ \n  3, 1, -1\n] // List stdlibs work
List::map2_v0 [10;20] [1;2;3] (\a, b -> a - b) = Nothing // List stdlibs work
List::map2_v0 [10;20;30] [1;2;3] (\a, b -> a - b) = Just [ \n    9, 18, 27\n  ] // List stdlibs work
List::map2shortest_v0 [10;20] [1;2;3] (\a, b -> a - b) = [ \n  9, 18\n] // List stdlibs work
List::map2shortest_v0 [10;20;30] [1;2;3] (\a, b -> a - b) = [ \n  9, 18, 27\n] // List stdlibs work
List::zip_v0 [10;20] [1;2;3] = Nothing // List stdlibs work
List::zip_v0 [10;20;30] [1;2;3] = Just [ \n    [ \n      10, 1\n    ], [ \n      20, 2\n    ], [ \n      30, 3\n    ]\n  ] // List stdlibs work
List::zipShortest_v0 [10;20] [1;2;3] = [ \n  [ \n    10, 1\n  ], [ \n    20, 2\n  ]\n] // List stdlibs work
List::zipShortest_v0 [10;20;30] [1;2;3] = [ \n  [ \n    10, 1\n  ], [ \n    20, 2\n  ], [ \n    30, 3\n  ]\n] // List stdlibs work
List::unzip_v0 [[1;10];[2;20];[3;30]] = [ \n  [ \n    1, 2, 3\n  ], [ \n    10, 20, 30\n  ]\n] // List stdlibs work
List::filterMap_v0 [] (\item -> 0) = [] // List stdlibs work
List::filterMap_v0 [1;2;3] (\item -> if item == 2\n                                     then\n                                       Nothing\n                                     else\n                                       (Just (item * 2))) = [ \n  2, 6\n] // List stdlibs work
List::randomElement_v0 [] = Nothing // List stdlibs work
List::randomElement_v0 [1] = Just 1 // List stdlibs work
List::member_v0 [] 1 = false // List stdlibs work
List::contains_v0 [1;2;3] 2 = true // List stdlibs work
List::contains_v0 [1;2;3] 4 = false // List stdlibs work
List::contains_v0 [] 1 = false // List stdlibs work
List::interpose_v0 [1;2;3] 5 = [ \n  1, 5, 2, 5, 3\n] // List stdlibs work
List::interpose_v0 [] 5 = [] // List stdlibs work
List::interpose_v0 [1] 5 = [ \n  1\n] // List stdlibs work
List::interleave_v0 [1;2;3] [4;5;6] = [ \n  1, 4, 2, 5, 3, 6\n] // List stdlibs work
List::interleave_v0 [1;2;3] [4] = [ \n  1, 4, 2, 3\n] // List stdlibs work
List::interleave_v0 [1] [4;5;6] = [ \n  1, 4, 5, 6\n] // List stdlibs work
List::interleave_v0 [] [4;5;6] = [ \n  4, 5, 6\n] // List stdlibs work
List::interleave_v0 [1;2;3] [] = [ \n  1, 2, 3\n] // List stdlibs work
List::interleave_v0 [] [] = [] // List stdlibs work
List::takeWhile_v0 [1;2;3;4] (\item -> item < 3) = [ \n  1, 2\n] // List stdlibs work
List::takeWhile_v0 [1;5;2;2] (\item -> item < 3) = [ \n  1\n] // List stdlibs work
List::takeWhile_v0 [] (\item -> item < 3) = [] // List stdlibs work
List::takeWhile_v0 [1;2;3;4] (\item -> item < 1) = [] // List stdlibs work
List::dropWhile_v0 [1;2;3;4] (\item -> item < 3) = [ \n  3, 4\n] // List stdlibs work
List::dropWhile_v0 [1;5;2;2] (\item -> item < 3) = [ \n  5, 2, 2\n] // List stdlibs work
List::dropWhile_v0 [] (\item -> item < 3) = [] // List stdlibs work
List::dropWhile_v0 [1;2;3;4] (\item -> item >= 1) = [] // List stdlibs work
List::flatten_v0 [] = [] // List stdlibs work
List::flatten_v0 [[]] = [] // List stdlibs work
List::flatten_v0 [[[]]] = [ \n  []\n] // List stdlibs work
List::flatten_v0 [[1];[2];[3]] = [ \n  1, 2, 3\n] // List stdlibs work
List::flatten_v0 [[1];[[2;3]]] = [ \n  1, [ \n    2, 3\n  ]\n] // List stdlibs work
String::isEmpty_v0 "" = true // String stdlibs work
String::isEmpty_v0 "a" = false // String stdlibs work
String::append_v1 "hello" " world" = "hello world" // String stdlibs work
String::append_v1 "a" "̂" = "â" // String stdlibs work
String::append_v1 "ᄀ" "ᅡᆨ" = "각" // String stdlibs work
"hello" ++ " world" = "hello world" // String stdlibs work
"a" ++ "̂" = "â" // String stdlibs work
"ᄀ" ++ "ᅡᆨ" = "각" // String stdlibs work
String::slice_v0 "abcd" 2 3 = "c" // String stdlibs work
String::slice_v0 "abcd" 2 6 = "cd" // String stdlibs work
String::slice_v0 "abcd" 5 6 = "" // String stdlibs work
String::slice_v0 "abcd" 0 -1 = "abc" // String stdlibs work
String::slice_v0 "abcd" -2 4 = "cd" // String stdlibs work
String::slice_v0 "abcd" -5 1 = "a" // String stdlibs work
String::slice_v0 "abcd" -5 -6 = "" // String stdlibs work
String::slice_v0 "abcd" 3 2 = "" // String stdlibs work
String::first_v0 "abcd" 3 = "abc" // String stdlibs work
String::first_v0 "abcd" 0 = "" // String stdlibs work
String::first_v0 "abcd" -3 = "" // String stdlibs work
String::last_v0 "abcd" 3 = "bcd" // String stdlibs work
String::last_v0 "abcd" 0 = "" // String stdlibs work
String::last_v0 "abcd" -3 = "" // String stdlibs work
String::dropFirst_v0 "abcd" 3 = "d" // String stdlibs work
String::dropFirst_v0 "abcd" 0 = "abcd" // String stdlibs work
String::dropFirst_v0 "abcd" -3 = "abcd" // String stdlibs work
String::dropLast_v0 "abcd" 3 = "a" // String stdlibs work
String::dropLast_v0 "abcd" 0 = "abcd" // String stdlibs work
String::dropLast_v0 "abcd" -3 = "abcd" // String stdlibs work
String::padStart_v0 "123" "0" 6 = "000123" // String stdlibs work
String::padEnd_v0 "123" "0" 6 = "123000" // String stdlibs work
String::padStart_v0 "123" "0" 3 = "123" // String stdlibs work
String::padEnd_v0 "123" "0" 3 = "123" // String stdlibs work
String::trimStart_v0 "foo" = "foo" // String stdlibs work
String::trimEnd_v0 "foo" = "foo" // String stdlibs work
String::trimStart_v0 "  foo" = "foo" // String stdlibs work
String::trimEnd_v0 "  foo" = "  foo" // String stdlibs work
String::trimStart_v0 "foo  " = "foo  " // String stdlibs work
String::trimEnd_v0 "foo  " = "foo" // String stdlibs work
String::trimStart_v0 "  foo  " = "foo  " // String stdlibs work
String::trimEnd_v0 "  foo  " = "  foo" // String stdlibs work
String::trimStart_v0 "  foo bar  " = "foo bar  " // String stdlibs work
String::trimEnd_v0 "  foo bar  " = "  foo bar" // String stdlibs work
String::trimStart_v0 "  foo bar  " = "foo bar  " // String stdlibs work
String::trimEnd_v0 "  foo bar  " = "  foo bar" // String stdlibs work
String::trimStart_v0 "      " = "" // String stdlibs work
String::trimEnd_v0 "      " = "" // String stdlibs work
String::trimStart_v0 " 😄foobar😄 " = "😄foobar😄 " // String stdlibs work
String::trimEnd_v0 " 😄foobar😄 " = " 😄foobar😄" // String stdlibs work
let password = "password"\nPassword::check_v0 (Password::hash_v0 password) password = true // End-user password hashing and checking works
Date::parse_v0 "2019-07-28T22:42:36Z" = <Date: 2019-07-28T22:42:36Z> // Date lib works
Date::parse_v0 "asd"\n|>Bool::isError_v0\n = true // Date lib works
Date::parse_v1 "2019-07-28T22:42:36Z" = Ok <Date: 2019-07-28T22:42:36Z> // Date lib works
Date::parse_v1 "asd" = Error "Invalid date format" // Date lib works
Date::toString_v0 (Date::parse_v1 "2019-07-28T22:42:36Z") = "2019-07-28T22:42:36Z" // Date lib works
Date::year_v0 (Date::parse_v1 "2019-07-28T22:42:36Z") = 2019 // Date lib works
Date::month_v0 (Date::parse_v1 "2019-07-28T22:42:36Z") = 7 // Date lib works
Date::day_v0 (Date::parse_v1 "2019-07-28T22:42:36Z") = 28 // Date lib works
Date::weekday_v0 (Date::parse_v1 "2019-07-28T22:42:36Z") = 7 // Date lib works
Date::hour_v0 (Date::parse_v1 "2019-07-28T22:42:36Z") = 22 // Date lib works
Date::minute_v0 (Date::parse_v1 "2019-07-28T22:42:36Z") = 42 // Date lib works
Date::second_v0 (Date::parse_v1 "2019-07-28T22:42:36Z") = 36 // Date lib works
Date::parse_v1 "2019-07-28T22:42:36Z"\n|>Date::toSeconds_v0\n|>Date::fromSeconds_v0\n|>toString_v0\n = "2019-07-28T22:42:36Z" // Date lib works
1095379198\n|>Date::fromSeconds_v0\n|>Date::toSeconds_v0\n = 1095379198 // Date lib works
Date::parse_v1 "2019-12-27T03:27:36Z"\n|>Date::hour_v1\n = 3 // Date lib works
(Date::parse_v1 "2019-07-28T22:42:36Z") Date::<= (Date::parse_v1 "2020-11-26T04:37:46Z") = true // Date lib works
(Date::parse_v1 "2019-07-28T22:42:36Z") Date::<= (Date::parse_v1 "2019-07-28T22:42:36Z") = true // Date lib works
(Date::parse_v1 "2019-07-28T22:42:36Z") Date::< (Date::parse_v1 "2020-11-26T04:37:46Z") = true // Date lib works
(Date::parse_v1 "2019-07-28T22:42:36Z") Date::< (Date::parse_v1 "2019-07-28T22:42:36Z") = false // Date lib works
(Date::parse_v1 "2020-11-26T04:37:46Z") Date::> (Date::parse_v1 "2019-07-28T22:42:36Z") = true // Date lib works
(Date::parse_v1 "2019-07-28T22:42:36Z") Date::> (Date::parse_v1 "2019-07-28T22:42:36Z") = false // Date lib works
(Date::parse_v1 "2020-11-26T04:37:46Z") Date::>= (Date::parse_v1 "2019-07-28T22:42:36Z") = true // Date lib works
(Date::parse_v1 "2020-11-26T04:37:46Z") Date::>= (Date::parse_v1 "2020-11-26T04:37:46Z") = true // Date lib works
Date::today_v0\n|>toString_v0\n = "2020-10-17T00:00:00Z" // Date lib works
Date::parse_v1 "2019-07-28T22:42:36Z"\n|>Date::atStartOfDay_v0\n|>toString_v0\n = "2019-07-28T00:00:00Z" // Date lib works
DarkInternal::upsertUser_v1 "Name with space" "valid@email.com" "accidentalusername" = Error "Invalid username 'Name with space', must match /^[a-z][a-z0-9_]{2,20}$/" // Internal functions work
Bytes::hexEncode_v0 (Crypto::sha256_v0 (String::toBytes_v0 "")) = "E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855" // Crypto::sha digest functions work
Bytes::hexEncode_v0 (Crypto::sha384_v0 (String::toBytes_v0 "")) = "38B060A751AC96384CD9327EB1B1E36A21FDB71114BE07434C0CC7BF63F6E1DA274EDEBFE76F65FBD51AD2F14898B95B" // Crypto::sha digest functions work
Bytes::hexEncode_v0 (Crypto::md5_v0 (String::toBytes_v0 "")) = "D41D8CD98F00B204E9800998ECF8427E" // Crypto::sha digest functions work
let scope = "20150830/us-east-1/iam/aws4_request"\nlet content = "f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59"\nlet strs = ["AWS4-HMAC-SHA256";"20150830T123600Z";scope;content]\nlet strToSign = String::join_v0 strs String::newline_v0\nlet secret = String::toBytes_v0 "AWS4wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"\nlet data = String::toBytes_v0 "20150830"\nlet date = Crypto::sha256hmac_v0 secret data\nlet region = Crypto::sha256hmac_v0 date (String::toBytes_v0 "us-east-1")\nlet service = Crypto::sha256hmac_v0 region (String::toBytes_v0 "iam")\nlet signing = Crypto::sha256hmac_v0 service (String::toBytes_v0 "aws4_request")\nlet signed = Crypto::sha256hmac_v0 signing (String::toBytes_v0 strToSign)\nString::toLowercase_v1 (Bytes::hexEncode_v0 signed) = "5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7" // Crypto::sha256hmac works for AWS
Twitter::urlencode_v0 "https://google.com?q=left shark&l=en" = "https%3A%2F%2Fgoogle.com%3Fq%3Dleft%20shark%26l%3Den" // URL percent encoding
Float::sum_v0 [1.0;0.2] = 1.2 // Float stdlibs work
Float::ceiling_v0 1.3 = 2 // Float stdlibs work
Float::floor_v0 1.8 = 1 // Float stdlibs work
Float::round_v0 1.5 = 2 // Float stdlibs work
Float::truncate_v0 -2367.9267 = -2367 // Float stdlibs work
Float::min_v0 -10.0 1.0 = -10. // Float stdlibs work
Float::min_v0 10.0 1.0 = 1. // Float stdlibs work
Float::min_v0 10.0 (0.0 / 0.0) = nan // Float stdlibs work
Float::min_v0 (1.0 / 0.0) 1.0 = 1. // Float stdlibs work
Float::max_v0 -10.0 1.0 = 1. // Float stdlibs work
Float::max_v0 10.0 1.0 = 10. // Float stdlibs work
Float::max_v0 10.0 (0.0 / 0.0) = nan // Float stdlibs work
Float::max_v0 (1.0 / 0.0) 1.0 = inf // Float stdlibs work
Float::clamp_v0 -2.0 -5.0 5.0 = -2. // Float stdlibs work
Float::clamp_v0 -3.0 -2.0 1.0 = -2. // Float stdlibs work
Float::clamp_v0 3.0 0.0 2.0 = 2. // Float stdlibs work
Float::clamp_v0 -5.0 1.0 1.0 = 1. // Float stdlibs work
Float::clamp_v0 1.0 2.0 1.0 = 1. // Float stdlibs work
Float::clamp_v0 0.5 (-1.0 / 0.0) 1.0 = 0.5 // Float stdlibs work
Float::clamp_v0 (1.0 / 0.0) -1.0 0.5 = 0.5 // Float stdlibs work
Float::clamp_v0 (0.0 / 0.0) -1.0 1.0 = -nan // Float stdlibs work
Float::sqrt_v0 25.0 = 5. // Float stdlibs work
Float::power_v0 4.0 0.5 = 2. // Float stdlibs work
Float::power_v0 4.0 -0.5 = 0.5 // Float stdlibs work
Float::absoluteValue_v0 (0.0 / 0.0) = nan // Float stdlibs work
Float::absoluteValue_v0 (-1.0 / 0.0) = inf // Float stdlibs work
Float::absoluteValue_v0 -5.6 = 5.6 // Float stdlibs work
Float::negate_v0 (0.0 / 0.0) = nan // Float stdlibs work
Float::negate_v0 (1.0 / 0.0) = -inf // Float stdlibs work
Float::negate_v0 -5.6 = 5.6 // Float stdlibs work
Float::negate_v0 5.6 = -5.6 // Float stdlibs work
Float::divide_v0 9.0 2.0 = 4.5 // Float stdlibs work
Float::add_v0 1.2 1.3 = 2.5 // Float stdlibs work
Float::multiply_v0 26.0 0.5 = 13. // Float stdlibs work
Float::subtract_v0 1.0 0.2 = 0.8 // Float stdlibs work
Float::greaterThan_v0 0.2 0.1 = true // Float stdlibs work
Float::greaterThanOrEqualTo_v0 0.1 0.1 = true // Float stdlibs work
Float::lessThan_v0 0.2 0.1 = false // Float stdlibs work
Float::lessThanOrEqualTo_v0 0.1 0.1 = true // Float stdlibs work
List::map_v0 (List::range_v0 -5 5) (\v -> Int::mod_v0 v 4) = [ \n  3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1\n] // Int stdlibs work
List::map_v0 (List::range_v0 -5 5) (\v -> v % 4) = [ \n  3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1\n] // Int stdlibs work
List::map_v0 (List::range_v0 -5 5) (\v -> Int::remainder_v0 v 4) = [ \n  Ok -1, Ok 0, Ok -3, Ok -2, Ok -1, Ok 0, Ok 1, Ok 2, Ok 3, Ok 0, Ok 1\n] // Int stdlibs work
List::map_v0 (List::range_v0 -5 5) (\v -> Int::remainder_v0 v -4) = [ \n  Ok -1, Ok 0, Ok -3, Ok -2, Ok -1, Ok 0, Ok 1, Ok 2, Ok 3, Ok 0, Ok 1\n] // Int stdlibs work
Int::remainder_v0 5 0 = Error "`divisor` must be non-zero" // Int stdlibs work
Int::max_v0 5 6 = 6 // Int stdlibs work
Int::min_v0 5 6 = 5 // Int stdlibs work
Int::absoluteValue_v0 -5 = 5 // Int stdlibs work
Int::absoluteValue_v0 5 = 5 // Int stdlibs work
Int::clamp_v0 -2 -5 5 = -2 // Int stdlibs work
Int::clamp_v0 -3 -2 1 = -2 // Int stdlibs work
Int::clamp_v0 3 0 2 = 2 // Int stdlibs work
Int::clamp_v0 -5 1 1 = 1 // Int stdlibs work
Int::clamp_v0 1 2 1 = 1 // Int stdlibs work
Int::negate_v0 -5 = 5 // Int stdlibs work
Int::negate_v0 5 = -5 // Int stdlibs work
Bool::and_v0 true false = false // Bool stdlibs work
Bool::and_v0 false true = false // Bool stdlibs work
Bool::and_v0 false false = false // Bool stdlibs work
Bool::and_v0 true true = true // Bool stdlibs work
Bool::xor_v0 true false = true // Bool stdlibs work
Bool::xor_v0 false true = true // Bool stdlibs work
Bool::xor_v0 false false = false // Bool stdlibs work
Bool::xor_v0 true true = false // Bool stdlibs work
Bool::not_v0 true = false // Bool stdlibs work
Bool::not_v0 false = true // Bool stdlibs work
Bool::or_v0 true false = true // Bool stdlibs work
Bool::or_v0 true true = true // Bool stdlibs work
Bool::or_v0 false false = false // Bool stdlibs work
Bool::isNull_v0 (null) = true // Bool stdlibs work
Bool::isNull_v0 true = false // Bool stdlibs work
Bytes::length_v0 (String::toBytes_v0 "abcdef") = 6 // Bytes stdlibs work
List::sortByComparator_v0 [3;1;2] (\a, b -> if Int::lessThan_v0 a b\n                                            then\n                                              -1\n                                            else\n                                              1) = Ok [ \n    1, 2, 3\n  ] // List::sortByComparator works
List::sortByComparator_v0 [3;1;2] (\a, b -> 0.1) = Error "`f` must return one of -1, 0, 1, but returned non-int: 0.1" // List::sortByComparator works
List::sortByComparator_v0 [3;1;2] (\a, b -> 3) = Error "`f` must return one of -1, 0, 1, but returned another int: 3" // List::sortByComparator works
Math::pi_v0 = 3.14159265359 // Math stdlibs work
Math::tau_v0 = 6.28318530718 // Math stdlibs work
Math::degrees_v0 360.0 = 6.28318530718 // Math stdlibs work
Math::degrees_v0 -180.0 = -3.14159265359 // Math stdlibs work
Math::turns_v0 1.0 = 6.28318530718 // Math stdlibs work
Math::turns_v0 (Float::negate_v0 0.5) = -3.14159265359 // Math stdlibs work
Math::radians_v0 6.283185307179586 = 6.28318530718 // Math stdlibs work
Math::radians_v0 (Float::negate_v0 3.141592653589793) = -3.14159265359 // Math stdlibs work
Math::cos_v0 0.0 = 1. // Math stdlibs work
Math::cos_v0 Math::pi_v0 = -1. // Math stdlibs work
Math::sin_v0 0.0 = 0. // Math stdlibs work
Math::sin_v0 (/_v0 Math::pi_v0 2.0) = 1. // Math stdlibs work
Math::tan_v0 0.0 = 0. // Math stdlibs work
Math::tan_v0 (/_v0 Math::pi_v0 4.0) = 1. // Math stdlibs work
Math::acos_v0 1.0 = Just 0. // Math stdlibs work
Math::acos_v0 -1.0 = Just 3.14159265359 // Math stdlibs work
Math::acos_v0 5.0 = Nothing // Math stdlibs work
Math::asin_v0 0.0 = Just 0. // Math stdlibs work
Math::asin_v0 1.0 = Just 1.57079632679 // Math stdlibs work
Math::asin_v0 5.0 = Nothing // Math stdlibs work
Math::atan_v0 0.0 = 0. // Math stdlibs work
Math::atan_v0 1.0 = 0.785398163397 // Math stdlibs work
Math::atan2_v0 0.0 1.0 = 0. // Math stdlibs work
Math::atan2_v0 1.0 1.0 = 0.785398163397 // Math stdlibs work
Math::atan2_v0 -1.0 1.0 = -0.785398163397 // Math stdlibs work
Math::atan2_v0 1.0 -1.0 = 2.35619449019 // Math stdlibs work
Math::atan2_v0 -1.0 -1.0 = -2.35619449019 // Math stdlibs work
Math::cosh_v0 0.0 = 1. // Math stdlibs work
Math::sinh_v0 0.0 = 0. // Math stdlibs work
Math::tanh_v0 0.0 = 0. // Math stdlibs work
Http::setCookie_v2 "myCookie" "myVal" {} = { \n  Set-Cookie: "myCookie=myVal"\n} // HTTP stdlibs work
match Date::parse_v1 "2019-07-28T22:42:00Z"\n  Ok date -> Http::setCookie_v2 "myCookie" "myVal" {\n                                                     Expires = date\n                                                     Max-Age = 3600\n                                                     Domain = "darklang.com"\n                                                     Path = "/my/path"\n                                                     Secure = true\n                                                     HttpOnly = true\n                                                     SameSite = "Strict"\n                                                   }\n = { \n  Set-Cookie: "myCookie=myVal; Secure; SameSite=Strict; Path=/my/path; Max-Age=3600; HttpOnly; Expires=Sun, 28 Jul 2019 22:42:00 GMT; Domain=darklang.com"\n} // HTTP stdlibs work
